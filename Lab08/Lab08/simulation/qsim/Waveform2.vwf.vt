// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/07/2023 11:49:32"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    ula16
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ula16_vlg_sample_tst(
	AOP,
	BOP,
	COP,
	X,
	Y,
	sampler_tx
);
input  AOP;
input  BOP;
input  COP;
input [7:0] X;
input [7:0] Y;
output sampler_tx;

reg sample;
time current_time;
always @(AOP or BOP or COP or X or Y)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module ula16_vlg_check_tst (
	carryout,
	SAIDA,
	sampler_rx
);
input  carryout;
input [7:0] SAIDA;
input sampler_rx;

reg  carryout_expected;
reg [7:0] SAIDA_expected;

reg  carryout_prev;
reg [7:0] SAIDA_prev;

reg  carryout_expected_prev;
reg [7:0] SAIDA_expected_prev;

reg  last_carryout_exp;
reg [7:0] last_SAIDA_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	carryout_prev = carryout;
	SAIDA_prev = SAIDA;
end

// update expected /o prevs

always @(trigger)
begin
	carryout_expected_prev = carryout_expected;
	SAIDA_expected_prev = SAIDA_expected;
end



// expected carryout
initial
begin
	carryout_expected = 1'bX;
end 
// expected SAIDA[ 7 ]
initial
begin
	SAIDA_expected[7] = 1'bX;
end 
// expected SAIDA[ 6 ]
initial
begin
	SAIDA_expected[6] = 1'bX;
end 
// expected SAIDA[ 5 ]
initial
begin
	SAIDA_expected[5] = 1'bX;
end 
// expected SAIDA[ 4 ]
initial
begin
	SAIDA_expected[4] = 1'bX;
end 
// expected SAIDA[ 3 ]
initial
begin
	SAIDA_expected[3] = 1'bX;
end 
// expected SAIDA[ 2 ]
initial
begin
	SAIDA_expected[2] = 1'bX;
end 
// expected SAIDA[ 1 ]
initial
begin
	SAIDA_expected[1] = 1'bX;
end 
// expected SAIDA[ 0 ]
initial
begin
	SAIDA_expected[0] = 1'bX;
end 
// generate trigger
always @(carryout_expected or carryout or SAIDA_expected or SAIDA)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected carryout = %b | expected SAIDA = %b | ",carryout_expected_prev,SAIDA_expected_prev);
	$display("| real carryout = %b | real SAIDA = %b | ",carryout_prev,SAIDA_prev);
`endif
	if (
		( carryout_expected_prev !== 1'bx ) && ( carryout_prev !== carryout_expected_prev )
		&& ((carryout_expected_prev !== last_carryout_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port carryout :: @time = %t",  $realtime);
		$display ("     Expected value = %b", carryout_expected_prev);
		$display ("     Real value = %b", carryout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_carryout_exp = carryout_expected_prev;
	end
	if (
		( SAIDA_expected_prev[0] !== 1'bx ) && ( SAIDA_prev[0] !== SAIDA_expected_prev[0] )
		&& ((SAIDA_expected_prev[0] !== last_SAIDA_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SAIDA[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SAIDA_expected_prev);
		$display ("     Real value = %b", SAIDA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_SAIDA_exp[0] = SAIDA_expected_prev[0];
	end
	if (
		( SAIDA_expected_prev[1] !== 1'bx ) && ( SAIDA_prev[1] !== SAIDA_expected_prev[1] )
		&& ((SAIDA_expected_prev[1] !== last_SAIDA_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SAIDA[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SAIDA_expected_prev);
		$display ("     Real value = %b", SAIDA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_SAIDA_exp[1] = SAIDA_expected_prev[1];
	end
	if (
		( SAIDA_expected_prev[2] !== 1'bx ) && ( SAIDA_prev[2] !== SAIDA_expected_prev[2] )
		&& ((SAIDA_expected_prev[2] !== last_SAIDA_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SAIDA[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SAIDA_expected_prev);
		$display ("     Real value = %b", SAIDA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_SAIDA_exp[2] = SAIDA_expected_prev[2];
	end
	if (
		( SAIDA_expected_prev[3] !== 1'bx ) && ( SAIDA_prev[3] !== SAIDA_expected_prev[3] )
		&& ((SAIDA_expected_prev[3] !== last_SAIDA_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SAIDA[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SAIDA_expected_prev);
		$display ("     Real value = %b", SAIDA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_SAIDA_exp[3] = SAIDA_expected_prev[3];
	end
	if (
		( SAIDA_expected_prev[4] !== 1'bx ) && ( SAIDA_prev[4] !== SAIDA_expected_prev[4] )
		&& ((SAIDA_expected_prev[4] !== last_SAIDA_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SAIDA[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SAIDA_expected_prev);
		$display ("     Real value = %b", SAIDA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_SAIDA_exp[4] = SAIDA_expected_prev[4];
	end
	if (
		( SAIDA_expected_prev[5] !== 1'bx ) && ( SAIDA_prev[5] !== SAIDA_expected_prev[5] )
		&& ((SAIDA_expected_prev[5] !== last_SAIDA_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SAIDA[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SAIDA_expected_prev);
		$display ("     Real value = %b", SAIDA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_SAIDA_exp[5] = SAIDA_expected_prev[5];
	end
	if (
		( SAIDA_expected_prev[6] !== 1'bx ) && ( SAIDA_prev[6] !== SAIDA_expected_prev[6] )
		&& ((SAIDA_expected_prev[6] !== last_SAIDA_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SAIDA[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SAIDA_expected_prev);
		$display ("     Real value = %b", SAIDA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_SAIDA_exp[6] = SAIDA_expected_prev[6];
	end
	if (
		( SAIDA_expected_prev[7] !== 1'bx ) && ( SAIDA_prev[7] !== SAIDA_expected_prev[7] )
		&& ((SAIDA_expected_prev[7] !== last_SAIDA_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SAIDA[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SAIDA_expected_prev);
		$display ("     Real value = %b", SAIDA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_SAIDA_exp[7] = SAIDA_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module ula16_vlg_vec_tst();
// constants                                           
// general purpose registers
reg AOP;
reg BOP;
reg COP;
reg [7:0] X;
reg [7:0] Y;
// wires                                               
wire carryout;
wire [7:0] SAIDA;

wire sampler;                             

// assign statements (if any)                          
ula16 i1 (
// port map - connection between master ports and signals/registers   
	.AOP(AOP),
	.BOP(BOP),
	.carryout(carryout),
	.COP(COP),
	.SAIDA(SAIDA),
	.X(X),
	.Y(Y)
);

// AOP
initial
begin
	AOP = 1'b0;
end 

// BOP
always
begin
	BOP = 1'b0;
	BOP = #500000 1'b1;
	#500000;
end 

// COP
always
begin
	COP = 1'b0;
	COP = #250000 1'b1;
	#250000;
end 
// X[ 7 ]
initial
begin
	X[7] = 1'b0;
end 
// X[ 6 ]
initial
begin
	X[6] = 1'b0;
end 
// X[ 5 ]
initial
begin
	X[5] = 1'b0;
end 
// X[ 4 ]
initial
begin
	X[4] = 1'b0;
end 
// X[ 3 ]
initial
begin
	X[3] = 1'b0;
	X[3] = #800000 1'b1;
end 
// X[ 2 ]
initial
begin
	X[2] = 1'b0;
	X[2] = #400000 1'b1;
	X[2] = #400000 1'b0;
end 
// X[ 1 ]
initial
begin
	repeat(2)
	begin
		X[1] = 1'b0;
		X[1] = #200000 1'b1;
		# 200000;
	end
	X[1] = 1'b0;
end 
// X[ 0 ]
always
begin
	X[0] = 1'b0;
	X[0] = #100000 1'b1;
	#100000;
end 
// Y[ 7 ]
initial
begin
	Y[7] = 1'b0;
end 
// Y[ 6 ]
initial
begin
	Y[6] = 1'b0;
end 
// Y[ 5 ]
initial
begin
	Y[5] = 1'b0;
end 
// Y[ 4 ]
initial
begin
	Y[4] = 1'b0;
	Y[4] = #800000 1'b1;
end 
// Y[ 3 ]
initial
begin
	Y[3] = 1'b0;
	Y[3] = #400000 1'b1;
	Y[3] = #400000 1'b0;
end 
// Y[ 2 ]
initial
begin
	repeat(2)
	begin
		Y[2] = 1'b0;
		Y[2] = #200000 1'b1;
		# 200000;
	end
	Y[2] = 1'b0;
end 
// Y[ 1 ]
always
begin
	Y[1] = 1'b0;
	Y[1] = #100000 1'b1;
	#100000;
end 
// Y[ 0 ]
always
begin
	Y[0] = 1'b0;
	Y[0] = #50000 1'b1;
	#50000;
end 

ula16_vlg_sample_tst tb_sample (
	.AOP(AOP),
	.BOP(BOP),
	.COP(COP),
	.X(X),
	.Y(Y),
	.sampler_tx(sampler)
);

ula16_vlg_check_tst tb_out(
	.carryout(carryout),
	.SAIDA(SAIDA),
	.sampler_rx(sampler)
);
endmodule

