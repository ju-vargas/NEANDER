// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/17/2023 22:40:04"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    decod
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module decod_vlg_sample_tst(
	A,
	B,
	C,
	D,
	sampler_tx
);
input  A;
input  B;
input  C;
input  D;
output sampler_tx;

reg sample;
time current_time;
always @(A or B or C or D)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module decod_vlg_check_tst (
	d0,
	d1,
	d2,
	d3,
	d4,
	d5,
	d6,
	d7,
	d8,
	d9,
	d10,
	d11,
	d12,
	d13,
	d14,
	d15,
	sampler_rx
);
input  d0;
input  d1;
input  d2;
input  d3;
input  d4;
input  d5;
input  d6;
input  d7;
input  d8;
input  d9;
input  d10;
input  d11;
input  d12;
input  d13;
input  d14;
input  d15;
input sampler_rx;

reg  d0_expected;
reg  d1_expected;
reg  d2_expected;
reg  d3_expected;
reg  d4_expected;
reg  d5_expected;
reg  d6_expected;
reg  d7_expected;
reg  d8_expected;
reg  d9_expected;
reg  d10_expected;
reg  d11_expected;
reg  d12_expected;
reg  d13_expected;
reg  d14_expected;
reg  d15_expected;

reg  d0_prev;
reg  d1_prev;
reg  d2_prev;
reg  d3_prev;
reg  d4_prev;
reg  d5_prev;
reg  d6_prev;
reg  d7_prev;
reg  d8_prev;
reg  d9_prev;
reg  d10_prev;
reg  d11_prev;
reg  d12_prev;
reg  d13_prev;
reg  d14_prev;
reg  d15_prev;

reg  d0_expected_prev;
reg  d1_expected_prev;
reg  d2_expected_prev;
reg  d3_expected_prev;
reg  d4_expected_prev;
reg  d5_expected_prev;
reg  d6_expected_prev;
reg  d7_expected_prev;
reg  d8_expected_prev;
reg  d9_expected_prev;
reg  d10_expected_prev;
reg  d11_expected_prev;
reg  d12_expected_prev;
reg  d13_expected_prev;
reg  d14_expected_prev;
reg  d15_expected_prev;

reg  last_d0_exp;
reg  last_d1_exp;
reg  last_d2_exp;
reg  last_d3_exp;
reg  last_d4_exp;
reg  last_d5_exp;
reg  last_d6_exp;
reg  last_d7_exp;
reg  last_d8_exp;
reg  last_d9_exp;
reg  last_d10_exp;
reg  last_d11_exp;
reg  last_d12_exp;
reg  last_d13_exp;
reg  last_d14_exp;
reg  last_d15_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:16] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 16'b1;
end

// update real /o prevs

always @(trigger)
begin
	d0_prev = d0;
	d1_prev = d1;
	d2_prev = d2;
	d3_prev = d3;
	d4_prev = d4;
	d5_prev = d5;
	d6_prev = d6;
	d7_prev = d7;
	d8_prev = d8;
	d9_prev = d9;
	d10_prev = d10;
	d11_prev = d11;
	d12_prev = d12;
	d13_prev = d13;
	d14_prev = d14;
	d15_prev = d15;
end

// update expected /o prevs

always @(trigger)
begin
	d0_expected_prev = d0_expected;
	d1_expected_prev = d1_expected;
	d2_expected_prev = d2_expected;
	d3_expected_prev = d3_expected;
	d4_expected_prev = d4_expected;
	d5_expected_prev = d5_expected;
	d6_expected_prev = d6_expected;
	d7_expected_prev = d7_expected;
	d8_expected_prev = d8_expected;
	d9_expected_prev = d9_expected;
	d10_expected_prev = d10_expected;
	d11_expected_prev = d11_expected;
	d12_expected_prev = d12_expected;
	d13_expected_prev = d13_expected;
	d14_expected_prev = d14_expected;
	d15_expected_prev = d15_expected;
end



// expected d0
initial
begin
	d0_expected = 1'bX;
end 

// expected d1
initial
begin
	d1_expected = 1'bX;
end 

// expected d2
initial
begin
	d2_expected = 1'bX;
end 

// expected d3
initial
begin
	d3_expected = 1'bX;
end 

// expected d4
initial
begin
	d4_expected = 1'bX;
end 

// expected d5
initial
begin
	d5_expected = 1'bX;
end 

// expected d6
initial
begin
	d6_expected = 1'bX;
end 

// expected d7
initial
begin
	d7_expected = 1'bX;
end 

// expected d8
initial
begin
	d8_expected = 1'bX;
end 

// expected d9
initial
begin
	d9_expected = 1'bX;
end 

// expected d10
initial
begin
	d10_expected = 1'bX;
end 

// expected d11
initial
begin
	d11_expected = 1'bX;
end 

// expected d12
initial
begin
	d12_expected = 1'bX;
end 

// expected d13
initial
begin
	d13_expected = 1'bX;
end 

// expected d14
initial
begin
	d14_expected = 1'bX;
end 

// expected d15
initial
begin
	d15_expected = 1'bX;
end 
// generate trigger
always @(d0_expected or d0 or d1_expected or d1 or d2_expected or d2 or d3_expected or d3 or d4_expected or d4 or d5_expected or d5 or d6_expected or d6 or d7_expected or d7 or d8_expected or d8 or d9_expected or d9 or d10_expected or d10 or d11_expected or d11 or d12_expected or d12 or d13_expected or d13 or d14_expected or d14 or d15_expected or d15)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected d0 = %b | expected d1 = %b | expected d2 = %b | expected d3 = %b | expected d4 = %b | expected d5 = %b | expected d6 = %b | expected d7 = %b | expected d8 = %b | expected d9 = %b | expected d10 = %b | expected d11 = %b | expected d12 = %b | expected d13 = %b | expected d14 = %b | expected d15 = %b | ",d0_expected_prev,d1_expected_prev,d2_expected_prev,d3_expected_prev,d4_expected_prev,d5_expected_prev,d6_expected_prev,d7_expected_prev,d8_expected_prev,d9_expected_prev,d10_expected_prev,d11_expected_prev,d12_expected_prev,d13_expected_prev,d14_expected_prev,d15_expected_prev);
	$display("| real d0 = %b | real d1 = %b | real d2 = %b | real d3 = %b | real d4 = %b | real d5 = %b | real d6 = %b | real d7 = %b | real d8 = %b | real d9 = %b | real d10 = %b | real d11 = %b | real d12 = %b | real d13 = %b | real d14 = %b | real d15 = %b | ",d0_prev,d1_prev,d2_prev,d3_prev,d4_prev,d5_prev,d6_prev,d7_prev,d8_prev,d9_prev,d10_prev,d11_prev,d12_prev,d13_prev,d14_prev,d15_prev);
`endif
	if (
		( d0_expected_prev !== 1'bx ) && ( d0_prev !== d0_expected_prev )
		&& ((d0_expected_prev !== last_d0_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port d0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", d0_expected_prev);
		$display ("     Real value = %b", d0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_d0_exp = d0_expected_prev;
	end
	if (
		( d1_expected_prev !== 1'bx ) && ( d1_prev !== d1_expected_prev )
		&& ((d1_expected_prev !== last_d1_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port d1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", d1_expected_prev);
		$display ("     Real value = %b", d1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_d1_exp = d1_expected_prev;
	end
	if (
		( d2_expected_prev !== 1'bx ) && ( d2_prev !== d2_expected_prev )
		&& ((d2_expected_prev !== last_d2_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port d2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", d2_expected_prev);
		$display ("     Real value = %b", d2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_d2_exp = d2_expected_prev;
	end
	if (
		( d3_expected_prev !== 1'bx ) && ( d3_prev !== d3_expected_prev )
		&& ((d3_expected_prev !== last_d3_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port d3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", d3_expected_prev);
		$display ("     Real value = %b", d3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_d3_exp = d3_expected_prev;
	end
	if (
		( d4_expected_prev !== 1'bx ) && ( d4_prev !== d4_expected_prev )
		&& ((d4_expected_prev !== last_d4_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port d4 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", d4_expected_prev);
		$display ("     Real value = %b", d4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_d4_exp = d4_expected_prev;
	end
	if (
		( d5_expected_prev !== 1'bx ) && ( d5_prev !== d5_expected_prev )
		&& ((d5_expected_prev !== last_d5_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port d5 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", d5_expected_prev);
		$display ("     Real value = %b", d5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_d5_exp = d5_expected_prev;
	end
	if (
		( d6_expected_prev !== 1'bx ) && ( d6_prev !== d6_expected_prev )
		&& ((d6_expected_prev !== last_d6_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port d6 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", d6_expected_prev);
		$display ("     Real value = %b", d6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_d6_exp = d6_expected_prev;
	end
	if (
		( d7_expected_prev !== 1'bx ) && ( d7_prev !== d7_expected_prev )
		&& ((d7_expected_prev !== last_d7_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port d7 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", d7_expected_prev);
		$display ("     Real value = %b", d7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_d7_exp = d7_expected_prev;
	end
	if (
		( d8_expected_prev !== 1'bx ) && ( d8_prev !== d8_expected_prev )
		&& ((d8_expected_prev !== last_d8_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port d8 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", d8_expected_prev);
		$display ("     Real value = %b", d8_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_d8_exp = d8_expected_prev;
	end
	if (
		( d9_expected_prev !== 1'bx ) && ( d9_prev !== d9_expected_prev )
		&& ((d9_expected_prev !== last_d9_exp) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port d9 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", d9_expected_prev);
		$display ("     Real value = %b", d9_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_d9_exp = d9_expected_prev;
	end
	if (
		( d10_expected_prev !== 1'bx ) && ( d10_prev !== d10_expected_prev )
		&& ((d10_expected_prev !== last_d10_exp) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port d10 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", d10_expected_prev);
		$display ("     Real value = %b", d10_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_d10_exp = d10_expected_prev;
	end
	if (
		( d11_expected_prev !== 1'bx ) && ( d11_prev !== d11_expected_prev )
		&& ((d11_expected_prev !== last_d11_exp) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port d11 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", d11_expected_prev);
		$display ("     Real value = %b", d11_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_d11_exp = d11_expected_prev;
	end
	if (
		( d12_expected_prev !== 1'bx ) && ( d12_prev !== d12_expected_prev )
		&& ((d12_expected_prev !== last_d12_exp) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port d12 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", d12_expected_prev);
		$display ("     Real value = %b", d12_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_d12_exp = d12_expected_prev;
	end
	if (
		( d13_expected_prev !== 1'bx ) && ( d13_prev !== d13_expected_prev )
		&& ((d13_expected_prev !== last_d13_exp) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port d13 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", d13_expected_prev);
		$display ("     Real value = %b", d13_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_d13_exp = d13_expected_prev;
	end
	if (
		( d14_expected_prev !== 1'bx ) && ( d14_prev !== d14_expected_prev )
		&& ((d14_expected_prev !== last_d14_exp) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port d14 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", d14_expected_prev);
		$display ("     Real value = %b", d14_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_d14_exp = d14_expected_prev;
	end
	if (
		( d15_expected_prev !== 1'bx ) && ( d15_prev !== d15_expected_prev )
		&& ((d15_expected_prev !== last_d15_exp) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port d15 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", d15_expected_prev);
		$display ("     Real value = %b", d15_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_d15_exp = d15_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module decod_vlg_vec_tst();
// constants                                           
// general purpose registers
reg A;
reg B;
reg C;
reg D;
// wires                                               
wire d0;
wire d1;
wire d2;
wire d3;
wire d4;
wire d5;
wire d6;
wire d7;
wire d8;
wire d9;
wire d10;
wire d11;
wire d12;
wire d13;
wire d14;
wire d15;

wire sampler;                             

// assign statements (if any)                          
decod i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.B(B),
	.C(C),
	.D(D),
	.d0(d0),
	.d1(d1),
	.d2(d2),
	.d3(d3),
	.d4(d4),
	.d5(d5),
	.d6(d6),
	.d7(d7),
	.d8(d8),
	.d9(d9),
	.d10(d10),
	.d11(d11),
	.d12(d12),
	.d13(d13),
	.d14(d14),
	.d15(d15)
);

// A
initial
begin
	A = 1'b0;
	A = #400000 1'b1;
	A = #400000 1'b0;
end 

// B
initial
begin
	repeat(2)
	begin
		B = 1'b0;
		B = #200000 1'b1;
		# 200000;
	end
	B = 1'b0;
end 

// C
always
begin
	C = 1'b0;
	C = #100000 1'b1;
	#100000;
end 

// D
always
begin
	D = 1'b0;
	D = #50000 1'b1;
	#50000;
end 

decod_vlg_sample_tst tb_sample (
	.A(A),
	.B(B),
	.C(C),
	.D(D),
	.sampler_tx(sampler)
);

decod_vlg_check_tst tb_out(
	.d0(d0),
	.d1(d1),
	.d2(d2),
	.d3(d3),
	.d4(d4),
	.d5(d5),
	.d6(d6),
	.d7(d7),
	.d8(d8),
	.d9(d9),
	.d10(d10),
	.d11(d11),
	.d12(d12),
	.d13(d13),
	.d14(d14),
	.d15(d15),
	.sampler_rx(sampler)
);
endmodule

