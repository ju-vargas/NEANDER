// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/18/2023 15:42:15"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    NeanderMain
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module NeanderMain_vlg_sample_tst(
	CLK,
	mem,
	sampler_tx
);
input  CLK;
input  mem;
output sampler_tx;

reg sample;
time current_time;
always @(CLK or mem)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module NeanderMain_vlg_check_tst (
	addAAA,
	andAAA,
	HEX2,
	HEX3,
	notAAA,
	opA,
	opB,
	opC,
	orAAA,
	outroRDM,
	RIOUTTESTE,
	TESTEAC,
	testeINC,
	testemem,
	testePC,
	testeRDM,
	testereg,
	testesel,
	ULASAIDA,
	Xba,
	yAAA,
	Yba,
	sampler_rx
);
input  addAAA;
input  andAAA;
input [6:0] HEX2;
input [6:0] HEX3;
input  notAAA;
input  opA;
input  opB;
input  opC;
input  orAAA;
input [7:0] outroRDM;
input [7:0] RIOUTTESTE;
input [7:0] TESTEAC;
input  testeINC;
input [7:0] testemem;
input [7:0] testePC;
input [7:0] testeRDM;
input [7:0] testereg;
input [7:0] testesel;
input [7:0] ULASAIDA;
input [7:0] Xba;
input  yAAA;
input [7:0] Yba;
input sampler_rx;

reg  addAAA_expected;
reg  andAAA_expected;
reg [6:0] HEX2_expected;
reg [6:0] HEX3_expected;
reg  notAAA_expected;
reg  opA_expected;
reg  opB_expected;
reg  opC_expected;
reg  orAAA_expected;
reg [7:0] outroRDM_expected;
reg [7:0] RIOUTTESTE_expected;
reg [7:0] TESTEAC_expected;
reg  testeINC_expected;
reg [7:0] testemem_expected;
reg [7:0] testePC_expected;
reg [7:0] testeRDM_expected;
reg [7:0] testereg_expected;
reg [7:0] testesel_expected;
reg [7:0] ULASAIDA_expected;
reg [7:0] Xba_expected;
reg  yAAA_expected;
reg [7:0] Yba_expected;

reg  addAAA_prev;
reg  andAAA_prev;
reg [6:0] HEX2_prev;
reg [6:0] HEX3_prev;
reg  notAAA_prev;
reg  opA_prev;
reg  opB_prev;
reg  opC_prev;
reg  orAAA_prev;
reg [7:0] outroRDM_prev;
reg [7:0] RIOUTTESTE_prev;
reg [7:0] TESTEAC_prev;
reg  testeINC_prev;
reg [7:0] testemem_prev;
reg [7:0] testePC_prev;
reg [7:0] testeRDM_prev;
reg [7:0] testereg_prev;
reg [7:0] testesel_prev;
reg [7:0] ULASAIDA_prev;
reg [7:0] Xba_prev;
reg  yAAA_prev;
reg [7:0] Yba_prev;

reg  addAAA_expected_prev;
reg  andAAA_expected_prev;
reg [6:0] HEX2_expected_prev;
reg [6:0] HEX3_expected_prev;
reg  notAAA_expected_prev;
reg  opA_expected_prev;
reg  opB_expected_prev;
reg  opC_expected_prev;
reg  orAAA_expected_prev;
reg [7:0] outroRDM_expected_prev;
reg [7:0] RIOUTTESTE_expected_prev;
reg [7:0] TESTEAC_expected_prev;
reg  testeINC_expected_prev;
reg [7:0] testemem_expected_prev;
reg [7:0] testePC_expected_prev;
reg [7:0] testeRDM_expected_prev;
reg [7:0] testereg_expected_prev;
reg [7:0] testesel_expected_prev;
reg [7:0] ULASAIDA_expected_prev;
reg [7:0] Xba_expected_prev;
reg  yAAA_expected_prev;
reg [7:0] Yba_expected_prev;

reg  last_addAAA_exp;
reg  last_andAAA_exp;
reg [6:0] last_HEX2_exp;
reg [6:0] last_HEX3_exp;
reg  last_notAAA_exp;
reg  last_opA_exp;
reg  last_opB_exp;
reg  last_opC_exp;
reg  last_orAAA_exp;
reg [7:0] last_outroRDM_exp;
reg [7:0] last_RIOUTTESTE_exp;
reg [7:0] last_TESTEAC_exp;
reg  last_testeINC_exp;
reg [7:0] last_testemem_exp;
reg [7:0] last_testePC_exp;
reg [7:0] last_testeRDM_exp;
reg [7:0] last_testereg_exp;
reg [7:0] last_testesel_exp;
reg [7:0] last_ULASAIDA_exp;
reg [7:0] last_Xba_exp;
reg  last_yAAA_exp;
reg [7:0] last_Yba_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:22] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 22'b1;
end

// update real /o prevs

always @(trigger)
begin
	addAAA_prev = addAAA;
	andAAA_prev = andAAA;
	HEX2_prev = HEX2;
	HEX3_prev = HEX3;
	notAAA_prev = notAAA;
	opA_prev = opA;
	opB_prev = opB;
	opC_prev = opC;
	orAAA_prev = orAAA;
	outroRDM_prev = outroRDM;
	RIOUTTESTE_prev = RIOUTTESTE;
	TESTEAC_prev = TESTEAC;
	testeINC_prev = testeINC;
	testemem_prev = testemem;
	testePC_prev = testePC;
	testeRDM_prev = testeRDM;
	testereg_prev = testereg;
	testesel_prev = testesel;
	ULASAIDA_prev = ULASAIDA;
	Xba_prev = Xba;
	yAAA_prev = yAAA;
	Yba_prev = Yba;
end

// update expected /o prevs

always @(trigger)
begin
	addAAA_expected_prev = addAAA_expected;
	andAAA_expected_prev = andAAA_expected;
	HEX2_expected_prev = HEX2_expected;
	HEX3_expected_prev = HEX3_expected;
	notAAA_expected_prev = notAAA_expected;
	opA_expected_prev = opA_expected;
	opB_expected_prev = opB_expected;
	opC_expected_prev = opC_expected;
	orAAA_expected_prev = orAAA_expected;
	outroRDM_expected_prev = outroRDM_expected;
	RIOUTTESTE_expected_prev = RIOUTTESTE_expected;
	TESTEAC_expected_prev = TESTEAC_expected;
	testeINC_expected_prev = testeINC_expected;
	testemem_expected_prev = testemem_expected;
	testePC_expected_prev = testePC_expected;
	testeRDM_expected_prev = testeRDM_expected;
	testereg_expected_prev = testereg_expected;
	testesel_expected_prev = testesel_expected;
	ULASAIDA_expected_prev = ULASAIDA_expected;
	Xba_expected_prev = Xba_expected;
	yAAA_expected_prev = yAAA_expected;
	Yba_expected_prev = Yba_expected;
end



// expected addAAA
initial
begin
	addAAA_expected = 1'bX;
end 

// expected andAAA
initial
begin
	andAAA_expected = 1'bX;
end 
// expected HEX2[ 6 ]
initial
begin
	HEX2_expected[6] = 1'bX;
end 
// expected HEX2[ 5 ]
initial
begin
	HEX2_expected[5] = 1'bX;
end 
// expected HEX2[ 4 ]
initial
begin
	HEX2_expected[4] = 1'bX;
end 
// expected HEX2[ 3 ]
initial
begin
	HEX2_expected[3] = 1'bX;
end 
// expected HEX2[ 2 ]
initial
begin
	HEX2_expected[2] = 1'bX;
end 
// expected HEX2[ 1 ]
initial
begin
	HEX2_expected[1] = 1'bX;
end 
// expected HEX2[ 0 ]
initial
begin
	HEX2_expected[0] = 1'bX;
end 
// expected HEX3[ 6 ]
initial
begin
	HEX3_expected[6] = 1'bX;
end 
// expected HEX3[ 5 ]
initial
begin
	HEX3_expected[5] = 1'bX;
end 
// expected HEX3[ 4 ]
initial
begin
	HEX3_expected[4] = 1'bX;
end 
// expected HEX3[ 3 ]
initial
begin
	HEX3_expected[3] = 1'bX;
end 
// expected HEX3[ 2 ]
initial
begin
	HEX3_expected[2] = 1'bX;
end 
// expected HEX3[ 1 ]
initial
begin
	HEX3_expected[1] = 1'bX;
end 
// expected HEX3[ 0 ]
initial
begin
	HEX3_expected[0] = 1'bX;
end 

// expected notAAA
initial
begin
	notAAA_expected = 1'bX;
end 

// expected opA
initial
begin
	opA_expected = 1'bX;
end 

// expected opB
initial
begin
	opB_expected = 1'bX;
end 

// expected opC
initial
begin
	opC_expected = 1'bX;
end 

// expected orAAA
initial
begin
	orAAA_expected = 1'bX;
end 
// expected outroRDM[ 7 ]
initial
begin
	outroRDM_expected[7] = 1'bX;
end 
// expected outroRDM[ 6 ]
initial
begin
	outroRDM_expected[6] = 1'bX;
end 
// expected outroRDM[ 5 ]
initial
begin
	outroRDM_expected[5] = 1'bX;
end 
// expected outroRDM[ 4 ]
initial
begin
	outroRDM_expected[4] = 1'bX;
end 
// expected outroRDM[ 3 ]
initial
begin
	outroRDM_expected[3] = 1'bX;
end 
// expected outroRDM[ 2 ]
initial
begin
	outroRDM_expected[2] = 1'bX;
end 
// expected outroRDM[ 1 ]
initial
begin
	outroRDM_expected[1] = 1'bX;
end 
// expected outroRDM[ 0 ]
initial
begin
	outroRDM_expected[0] = 1'bX;
end 
// expected RIOUTTESTE[ 7 ]
initial
begin
	RIOUTTESTE_expected[7] = 1'bX;
end 
// expected RIOUTTESTE[ 6 ]
initial
begin
	RIOUTTESTE_expected[6] = 1'bX;
end 
// expected RIOUTTESTE[ 5 ]
initial
begin
	RIOUTTESTE_expected[5] = 1'bX;
end 
// expected RIOUTTESTE[ 4 ]
initial
begin
	RIOUTTESTE_expected[4] = 1'bX;
end 
// expected RIOUTTESTE[ 3 ]
initial
begin
	RIOUTTESTE_expected[3] = 1'bX;
end 
// expected RIOUTTESTE[ 2 ]
initial
begin
	RIOUTTESTE_expected[2] = 1'bX;
end 
// expected RIOUTTESTE[ 1 ]
initial
begin
	RIOUTTESTE_expected[1] = 1'bX;
end 
// expected RIOUTTESTE[ 0 ]
initial
begin
	RIOUTTESTE_expected[0] = 1'bX;
end 
// expected TESTEAC[ 7 ]
initial
begin
	TESTEAC_expected[7] = 1'bX;
end 
// expected TESTEAC[ 6 ]
initial
begin
	TESTEAC_expected[6] = 1'bX;
end 
// expected TESTEAC[ 5 ]
initial
begin
	TESTEAC_expected[5] = 1'bX;
end 
// expected TESTEAC[ 4 ]
initial
begin
	TESTEAC_expected[4] = 1'bX;
end 
// expected TESTEAC[ 3 ]
initial
begin
	TESTEAC_expected[3] = 1'bX;
end 
// expected TESTEAC[ 2 ]
initial
begin
	TESTEAC_expected[2] = 1'bX;
end 
// expected TESTEAC[ 1 ]
initial
begin
	TESTEAC_expected[1] = 1'bX;
end 
// expected TESTEAC[ 0 ]
initial
begin
	TESTEAC_expected[0] = 1'bX;
end 

// expected testeINC
initial
begin
	testeINC_expected = 1'bX;
end 
// expected testemem[ 7 ]
initial
begin
	testemem_expected[7] = 1'bX;
end 
// expected testemem[ 6 ]
initial
begin
	testemem_expected[6] = 1'bX;
end 
// expected testemem[ 5 ]
initial
begin
	testemem_expected[5] = 1'bX;
end 
// expected testemem[ 4 ]
initial
begin
	testemem_expected[4] = 1'bX;
end 
// expected testemem[ 3 ]
initial
begin
	testemem_expected[3] = 1'bX;
end 
// expected testemem[ 2 ]
initial
begin
	testemem_expected[2] = 1'bX;
end 
// expected testemem[ 1 ]
initial
begin
	testemem_expected[1] = 1'bX;
end 
// expected testemem[ 0 ]
initial
begin
	testemem_expected[0] = 1'bX;
end 
// expected testePC[ 7 ]
initial
begin
	testePC_expected[7] = 1'bX;
end 
// expected testePC[ 6 ]
initial
begin
	testePC_expected[6] = 1'bX;
end 
// expected testePC[ 5 ]
initial
begin
	testePC_expected[5] = 1'bX;
end 
// expected testePC[ 4 ]
initial
begin
	testePC_expected[4] = 1'bX;
end 
// expected testePC[ 3 ]
initial
begin
	testePC_expected[3] = 1'bX;
end 
// expected testePC[ 2 ]
initial
begin
	testePC_expected[2] = 1'bX;
end 
// expected testePC[ 1 ]
initial
begin
	testePC_expected[1] = 1'bX;
end 
// expected testePC[ 0 ]
initial
begin
	testePC_expected[0] = 1'bX;
end 
// expected testeRDM[ 7 ]
initial
begin
	testeRDM_expected[7] = 1'bX;
end 
// expected testeRDM[ 6 ]
initial
begin
	testeRDM_expected[6] = 1'bX;
end 
// expected testeRDM[ 5 ]
initial
begin
	testeRDM_expected[5] = 1'bX;
end 
// expected testeRDM[ 4 ]
initial
begin
	testeRDM_expected[4] = 1'bX;
end 
// expected testeRDM[ 3 ]
initial
begin
	testeRDM_expected[3] = 1'bX;
end 
// expected testeRDM[ 2 ]
initial
begin
	testeRDM_expected[2] = 1'bX;
end 
// expected testeRDM[ 1 ]
initial
begin
	testeRDM_expected[1] = 1'bX;
end 
// expected testeRDM[ 0 ]
initial
begin
	testeRDM_expected[0] = 1'bX;
end 
// expected testereg[ 7 ]
initial
begin
	testereg_expected[7] = 1'bX;
end 
// expected testereg[ 6 ]
initial
begin
	testereg_expected[6] = 1'bX;
end 
// expected testereg[ 5 ]
initial
begin
	testereg_expected[5] = 1'bX;
end 
// expected testereg[ 4 ]
initial
begin
	testereg_expected[4] = 1'bX;
end 
// expected testereg[ 3 ]
initial
begin
	testereg_expected[3] = 1'bX;
end 
// expected testereg[ 2 ]
initial
begin
	testereg_expected[2] = 1'bX;
end 
// expected testereg[ 1 ]
initial
begin
	testereg_expected[1] = 1'bX;
end 
// expected testereg[ 0 ]
initial
begin
	testereg_expected[0] = 1'bX;
end 
// expected testesel[ 7 ]
initial
begin
	testesel_expected[7] = 1'bX;
end 
// expected testesel[ 6 ]
initial
begin
	testesel_expected[6] = 1'bX;
end 
// expected testesel[ 5 ]
initial
begin
	testesel_expected[5] = 1'bX;
end 
// expected testesel[ 4 ]
initial
begin
	testesel_expected[4] = 1'bX;
end 
// expected testesel[ 3 ]
initial
begin
	testesel_expected[3] = 1'bX;
end 
// expected testesel[ 2 ]
initial
begin
	testesel_expected[2] = 1'bX;
end 
// expected testesel[ 1 ]
initial
begin
	testesel_expected[1] = 1'bX;
end 
// expected testesel[ 0 ]
initial
begin
	testesel_expected[0] = 1'bX;
end 
// expected ULASAIDA[ 7 ]
initial
begin
	ULASAIDA_expected[7] = 1'bX;
end 
// expected ULASAIDA[ 6 ]
initial
begin
	ULASAIDA_expected[6] = 1'bX;
end 
// expected ULASAIDA[ 5 ]
initial
begin
	ULASAIDA_expected[5] = 1'bX;
end 
// expected ULASAIDA[ 4 ]
initial
begin
	ULASAIDA_expected[4] = 1'bX;
end 
// expected ULASAIDA[ 3 ]
initial
begin
	ULASAIDA_expected[3] = 1'bX;
end 
// expected ULASAIDA[ 2 ]
initial
begin
	ULASAIDA_expected[2] = 1'bX;
end 
// expected ULASAIDA[ 1 ]
initial
begin
	ULASAIDA_expected[1] = 1'bX;
end 
// expected ULASAIDA[ 0 ]
initial
begin
	ULASAIDA_expected[0] = 1'bX;
end 
// expected Xba[ 7 ]
initial
begin
	Xba_expected[7] = 1'bX;
end 
// expected Xba[ 6 ]
initial
begin
	Xba_expected[6] = 1'bX;
end 
// expected Xba[ 5 ]
initial
begin
	Xba_expected[5] = 1'bX;
end 
// expected Xba[ 4 ]
initial
begin
	Xba_expected[4] = 1'bX;
end 
// expected Xba[ 3 ]
initial
begin
	Xba_expected[3] = 1'bX;
end 
// expected Xba[ 2 ]
initial
begin
	Xba_expected[2] = 1'bX;
end 
// expected Xba[ 1 ]
initial
begin
	Xba_expected[1] = 1'bX;
end 
// expected Xba[ 0 ]
initial
begin
	Xba_expected[0] = 1'bX;
end 

// expected yAAA
initial
begin
	yAAA_expected = 1'bX;
end 
// expected Yba[ 7 ]
initial
begin
	Yba_expected[7] = 1'bX;
end 
// expected Yba[ 6 ]
initial
begin
	Yba_expected[6] = 1'bX;
end 
// expected Yba[ 5 ]
initial
begin
	Yba_expected[5] = 1'bX;
end 
// expected Yba[ 4 ]
initial
begin
	Yba_expected[4] = 1'bX;
end 
// expected Yba[ 3 ]
initial
begin
	Yba_expected[3] = 1'bX;
end 
// expected Yba[ 2 ]
initial
begin
	Yba_expected[2] = 1'bX;
end 
// expected Yba[ 1 ]
initial
begin
	Yba_expected[1] = 1'bX;
end 
// expected Yba[ 0 ]
initial
begin
	Yba_expected[0] = 1'bX;
end 
// generate trigger
always @(addAAA_expected or addAAA or andAAA_expected or andAAA or HEX2_expected or HEX2 or HEX3_expected or HEX3 or notAAA_expected or notAAA or opA_expected or opA or opB_expected or opB or opC_expected or opC or orAAA_expected or orAAA or outroRDM_expected or outroRDM or RIOUTTESTE_expected or RIOUTTESTE or TESTEAC_expected or TESTEAC or testeINC_expected or testeINC or testemem_expected or testemem or testePC_expected or testePC or testeRDM_expected or testeRDM or testereg_expected or testereg or testesel_expected or testesel or ULASAIDA_expected or ULASAIDA or Xba_expected or Xba or yAAA_expected or yAAA or Yba_expected or Yba)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected addAAA = %b | expected andAAA = %b | expected HEX2 = %b | expected HEX3 = %b | expected notAAA = %b | expected opA = %b | expected opB = %b | expected opC = %b | expected orAAA = %b | expected outroRDM = %b | expected RIOUTTESTE = %b | expected TESTEAC = %b | expected testeINC = %b | expected testemem = %b | expected testePC = %b | expected testeRDM = %b | expected testereg = %b | expected testesel = %b | expected ULASAIDA = %b | expected Xba = %b | expected yAAA = %b | expected Yba = %b | ",addAAA_expected_prev,andAAA_expected_prev,HEX2_expected_prev,HEX3_expected_prev,notAAA_expected_prev,opA_expected_prev,opB_expected_prev,opC_expected_prev,orAAA_expected_prev,outroRDM_expected_prev,RIOUTTESTE_expected_prev,TESTEAC_expected_prev,testeINC_expected_prev,testemem_expected_prev,testePC_expected_prev,testeRDM_expected_prev,testereg_expected_prev,testesel_expected_prev,ULASAIDA_expected_prev,Xba_expected_prev,yAAA_expected_prev,Yba_expected_prev);
	$display("| real addAAA = %b | real andAAA = %b | real HEX2 = %b | real HEX3 = %b | real notAAA = %b | real opA = %b | real opB = %b | real opC = %b | real orAAA = %b | real outroRDM = %b | real RIOUTTESTE = %b | real TESTEAC = %b | real testeINC = %b | real testemem = %b | real testePC = %b | real testeRDM = %b | real testereg = %b | real testesel = %b | real ULASAIDA = %b | real Xba = %b | real yAAA = %b | real Yba = %b | ",addAAA_prev,andAAA_prev,HEX2_prev,HEX3_prev,notAAA_prev,opA_prev,opB_prev,opC_prev,orAAA_prev,outroRDM_prev,RIOUTTESTE_prev,TESTEAC_prev,testeINC_prev,testemem_prev,testePC_prev,testeRDM_prev,testereg_prev,testesel_prev,ULASAIDA_prev,Xba_prev,yAAA_prev,Yba_prev);
`endif
	if (
		( addAAA_expected_prev !== 1'bx ) && ( addAAA_prev !== addAAA_expected_prev )
		&& ((addAAA_expected_prev !== last_addAAA_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addAAA :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addAAA_expected_prev);
		$display ("     Real value = %b", addAAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addAAA_exp = addAAA_expected_prev;
	end
	if (
		( andAAA_expected_prev !== 1'bx ) && ( andAAA_prev !== andAAA_expected_prev )
		&& ((andAAA_expected_prev !== last_andAAA_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port andAAA :: @time = %t",  $realtime);
		$display ("     Expected value = %b", andAAA_expected_prev);
		$display ("     Real value = %b", andAAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_andAAA_exp = andAAA_expected_prev;
	end
	if (
		( HEX2_expected_prev[0] !== 1'bx ) && ( HEX2_prev[0] !== HEX2_expected_prev[0] )
		&& ((HEX2_expected_prev[0] !== last_HEX2_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX2_expected_prev);
		$display ("     Real value = %b", HEX2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_HEX2_exp[0] = HEX2_expected_prev[0];
	end
	if (
		( HEX2_expected_prev[1] !== 1'bx ) && ( HEX2_prev[1] !== HEX2_expected_prev[1] )
		&& ((HEX2_expected_prev[1] !== last_HEX2_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX2_expected_prev);
		$display ("     Real value = %b", HEX2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_HEX2_exp[1] = HEX2_expected_prev[1];
	end
	if (
		( HEX2_expected_prev[2] !== 1'bx ) && ( HEX2_prev[2] !== HEX2_expected_prev[2] )
		&& ((HEX2_expected_prev[2] !== last_HEX2_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX2_expected_prev);
		$display ("     Real value = %b", HEX2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_HEX2_exp[2] = HEX2_expected_prev[2];
	end
	if (
		( HEX2_expected_prev[3] !== 1'bx ) && ( HEX2_prev[3] !== HEX2_expected_prev[3] )
		&& ((HEX2_expected_prev[3] !== last_HEX2_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX2_expected_prev);
		$display ("     Real value = %b", HEX2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_HEX2_exp[3] = HEX2_expected_prev[3];
	end
	if (
		( HEX2_expected_prev[4] !== 1'bx ) && ( HEX2_prev[4] !== HEX2_expected_prev[4] )
		&& ((HEX2_expected_prev[4] !== last_HEX2_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX2_expected_prev);
		$display ("     Real value = %b", HEX2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_HEX2_exp[4] = HEX2_expected_prev[4];
	end
	if (
		( HEX2_expected_prev[5] !== 1'bx ) && ( HEX2_prev[5] !== HEX2_expected_prev[5] )
		&& ((HEX2_expected_prev[5] !== last_HEX2_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX2_expected_prev);
		$display ("     Real value = %b", HEX2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_HEX2_exp[5] = HEX2_expected_prev[5];
	end
	if (
		( HEX2_expected_prev[6] !== 1'bx ) && ( HEX2_prev[6] !== HEX2_expected_prev[6] )
		&& ((HEX2_expected_prev[6] !== last_HEX2_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX2_expected_prev);
		$display ("     Real value = %b", HEX2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_HEX2_exp[6] = HEX2_expected_prev[6];
	end
	if (
		( HEX3_expected_prev[0] !== 1'bx ) && ( HEX3_prev[0] !== HEX3_expected_prev[0] )
		&& ((HEX3_expected_prev[0] !== last_HEX3_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX3[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX3_expected_prev);
		$display ("     Real value = %b", HEX3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_HEX3_exp[0] = HEX3_expected_prev[0];
	end
	if (
		( HEX3_expected_prev[1] !== 1'bx ) && ( HEX3_prev[1] !== HEX3_expected_prev[1] )
		&& ((HEX3_expected_prev[1] !== last_HEX3_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX3[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX3_expected_prev);
		$display ("     Real value = %b", HEX3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_HEX3_exp[1] = HEX3_expected_prev[1];
	end
	if (
		( HEX3_expected_prev[2] !== 1'bx ) && ( HEX3_prev[2] !== HEX3_expected_prev[2] )
		&& ((HEX3_expected_prev[2] !== last_HEX3_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX3[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX3_expected_prev);
		$display ("     Real value = %b", HEX3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_HEX3_exp[2] = HEX3_expected_prev[2];
	end
	if (
		( HEX3_expected_prev[3] !== 1'bx ) && ( HEX3_prev[3] !== HEX3_expected_prev[3] )
		&& ((HEX3_expected_prev[3] !== last_HEX3_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX3[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX3_expected_prev);
		$display ("     Real value = %b", HEX3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_HEX3_exp[3] = HEX3_expected_prev[3];
	end
	if (
		( HEX3_expected_prev[4] !== 1'bx ) && ( HEX3_prev[4] !== HEX3_expected_prev[4] )
		&& ((HEX3_expected_prev[4] !== last_HEX3_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX3[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX3_expected_prev);
		$display ("     Real value = %b", HEX3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_HEX3_exp[4] = HEX3_expected_prev[4];
	end
	if (
		( HEX3_expected_prev[5] !== 1'bx ) && ( HEX3_prev[5] !== HEX3_expected_prev[5] )
		&& ((HEX3_expected_prev[5] !== last_HEX3_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX3[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX3_expected_prev);
		$display ("     Real value = %b", HEX3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_HEX3_exp[5] = HEX3_expected_prev[5];
	end
	if (
		( HEX3_expected_prev[6] !== 1'bx ) && ( HEX3_prev[6] !== HEX3_expected_prev[6] )
		&& ((HEX3_expected_prev[6] !== last_HEX3_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX3[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX3_expected_prev);
		$display ("     Real value = %b", HEX3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_HEX3_exp[6] = HEX3_expected_prev[6];
	end
	if (
		( notAAA_expected_prev !== 1'bx ) && ( notAAA_prev !== notAAA_expected_prev )
		&& ((notAAA_expected_prev !== last_notAAA_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port notAAA :: @time = %t",  $realtime);
		$display ("     Expected value = %b", notAAA_expected_prev);
		$display ("     Real value = %b", notAAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_notAAA_exp = notAAA_expected_prev;
	end
	if (
		( opA_expected_prev !== 1'bx ) && ( opA_prev !== opA_expected_prev )
		&& ((opA_expected_prev !== last_opA_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opA :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opA_expected_prev);
		$display ("     Real value = %b", opA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_opA_exp = opA_expected_prev;
	end
	if (
		( opB_expected_prev !== 1'bx ) && ( opB_prev !== opB_expected_prev )
		&& ((opB_expected_prev !== last_opB_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opB :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opB_expected_prev);
		$display ("     Real value = %b", opB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_opB_exp = opB_expected_prev;
	end
	if (
		( opC_expected_prev !== 1'bx ) && ( opC_prev !== opC_expected_prev )
		&& ((opC_expected_prev !== last_opC_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opC :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opC_expected_prev);
		$display ("     Real value = %b", opC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_opC_exp = opC_expected_prev;
	end
	if (
		( orAAA_expected_prev !== 1'bx ) && ( orAAA_prev !== orAAA_expected_prev )
		&& ((orAAA_expected_prev !== last_orAAA_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port orAAA :: @time = %t",  $realtime);
		$display ("     Expected value = %b", orAAA_expected_prev);
		$display ("     Real value = %b", orAAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_orAAA_exp = orAAA_expected_prev;
	end
	if (
		( outroRDM_expected_prev[0] !== 1'bx ) && ( outroRDM_prev[0] !== outroRDM_expected_prev[0] )
		&& ((outroRDM_expected_prev[0] !== last_outroRDM_exp[0]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outroRDM[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outroRDM_expected_prev);
		$display ("     Real value = %b", outroRDM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_outroRDM_exp[0] = outroRDM_expected_prev[0];
	end
	if (
		( outroRDM_expected_prev[1] !== 1'bx ) && ( outroRDM_prev[1] !== outroRDM_expected_prev[1] )
		&& ((outroRDM_expected_prev[1] !== last_outroRDM_exp[1]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outroRDM[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outroRDM_expected_prev);
		$display ("     Real value = %b", outroRDM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_outroRDM_exp[1] = outroRDM_expected_prev[1];
	end
	if (
		( outroRDM_expected_prev[2] !== 1'bx ) && ( outroRDM_prev[2] !== outroRDM_expected_prev[2] )
		&& ((outroRDM_expected_prev[2] !== last_outroRDM_exp[2]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outroRDM[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outroRDM_expected_prev);
		$display ("     Real value = %b", outroRDM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_outroRDM_exp[2] = outroRDM_expected_prev[2];
	end
	if (
		( outroRDM_expected_prev[3] !== 1'bx ) && ( outroRDM_prev[3] !== outroRDM_expected_prev[3] )
		&& ((outroRDM_expected_prev[3] !== last_outroRDM_exp[3]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outroRDM[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outroRDM_expected_prev);
		$display ("     Real value = %b", outroRDM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_outroRDM_exp[3] = outroRDM_expected_prev[3];
	end
	if (
		( outroRDM_expected_prev[4] !== 1'bx ) && ( outroRDM_prev[4] !== outroRDM_expected_prev[4] )
		&& ((outroRDM_expected_prev[4] !== last_outroRDM_exp[4]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outroRDM[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outroRDM_expected_prev);
		$display ("     Real value = %b", outroRDM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_outroRDM_exp[4] = outroRDM_expected_prev[4];
	end
	if (
		( outroRDM_expected_prev[5] !== 1'bx ) && ( outroRDM_prev[5] !== outroRDM_expected_prev[5] )
		&& ((outroRDM_expected_prev[5] !== last_outroRDM_exp[5]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outroRDM[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outroRDM_expected_prev);
		$display ("     Real value = %b", outroRDM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_outroRDM_exp[5] = outroRDM_expected_prev[5];
	end
	if (
		( outroRDM_expected_prev[6] !== 1'bx ) && ( outroRDM_prev[6] !== outroRDM_expected_prev[6] )
		&& ((outroRDM_expected_prev[6] !== last_outroRDM_exp[6]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outroRDM[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outroRDM_expected_prev);
		$display ("     Real value = %b", outroRDM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_outroRDM_exp[6] = outroRDM_expected_prev[6];
	end
	if (
		( outroRDM_expected_prev[7] !== 1'bx ) && ( outroRDM_prev[7] !== outroRDM_expected_prev[7] )
		&& ((outroRDM_expected_prev[7] !== last_outroRDM_exp[7]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outroRDM[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outroRDM_expected_prev);
		$display ("     Real value = %b", outroRDM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_outroRDM_exp[7] = outroRDM_expected_prev[7];
	end
	if (
		( RIOUTTESTE_expected_prev[0] !== 1'bx ) && ( RIOUTTESTE_prev[0] !== RIOUTTESTE_expected_prev[0] )
		&& ((RIOUTTESTE_expected_prev[0] !== last_RIOUTTESTE_exp[0]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RIOUTTESTE[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RIOUTTESTE_expected_prev);
		$display ("     Real value = %b", RIOUTTESTE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_RIOUTTESTE_exp[0] = RIOUTTESTE_expected_prev[0];
	end
	if (
		( RIOUTTESTE_expected_prev[1] !== 1'bx ) && ( RIOUTTESTE_prev[1] !== RIOUTTESTE_expected_prev[1] )
		&& ((RIOUTTESTE_expected_prev[1] !== last_RIOUTTESTE_exp[1]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RIOUTTESTE[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RIOUTTESTE_expected_prev);
		$display ("     Real value = %b", RIOUTTESTE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_RIOUTTESTE_exp[1] = RIOUTTESTE_expected_prev[1];
	end
	if (
		( RIOUTTESTE_expected_prev[2] !== 1'bx ) && ( RIOUTTESTE_prev[2] !== RIOUTTESTE_expected_prev[2] )
		&& ((RIOUTTESTE_expected_prev[2] !== last_RIOUTTESTE_exp[2]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RIOUTTESTE[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RIOUTTESTE_expected_prev);
		$display ("     Real value = %b", RIOUTTESTE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_RIOUTTESTE_exp[2] = RIOUTTESTE_expected_prev[2];
	end
	if (
		( RIOUTTESTE_expected_prev[3] !== 1'bx ) && ( RIOUTTESTE_prev[3] !== RIOUTTESTE_expected_prev[3] )
		&& ((RIOUTTESTE_expected_prev[3] !== last_RIOUTTESTE_exp[3]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RIOUTTESTE[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RIOUTTESTE_expected_prev);
		$display ("     Real value = %b", RIOUTTESTE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_RIOUTTESTE_exp[3] = RIOUTTESTE_expected_prev[3];
	end
	if (
		( RIOUTTESTE_expected_prev[4] !== 1'bx ) && ( RIOUTTESTE_prev[4] !== RIOUTTESTE_expected_prev[4] )
		&& ((RIOUTTESTE_expected_prev[4] !== last_RIOUTTESTE_exp[4]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RIOUTTESTE[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RIOUTTESTE_expected_prev);
		$display ("     Real value = %b", RIOUTTESTE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_RIOUTTESTE_exp[4] = RIOUTTESTE_expected_prev[4];
	end
	if (
		( RIOUTTESTE_expected_prev[5] !== 1'bx ) && ( RIOUTTESTE_prev[5] !== RIOUTTESTE_expected_prev[5] )
		&& ((RIOUTTESTE_expected_prev[5] !== last_RIOUTTESTE_exp[5]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RIOUTTESTE[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RIOUTTESTE_expected_prev);
		$display ("     Real value = %b", RIOUTTESTE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_RIOUTTESTE_exp[5] = RIOUTTESTE_expected_prev[5];
	end
	if (
		( RIOUTTESTE_expected_prev[6] !== 1'bx ) && ( RIOUTTESTE_prev[6] !== RIOUTTESTE_expected_prev[6] )
		&& ((RIOUTTESTE_expected_prev[6] !== last_RIOUTTESTE_exp[6]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RIOUTTESTE[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RIOUTTESTE_expected_prev);
		$display ("     Real value = %b", RIOUTTESTE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_RIOUTTESTE_exp[6] = RIOUTTESTE_expected_prev[6];
	end
	if (
		( RIOUTTESTE_expected_prev[7] !== 1'bx ) && ( RIOUTTESTE_prev[7] !== RIOUTTESTE_expected_prev[7] )
		&& ((RIOUTTESTE_expected_prev[7] !== last_RIOUTTESTE_exp[7]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RIOUTTESTE[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RIOUTTESTE_expected_prev);
		$display ("     Real value = %b", RIOUTTESTE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_RIOUTTESTE_exp[7] = RIOUTTESTE_expected_prev[7];
	end
	if (
		( TESTEAC_expected_prev[0] !== 1'bx ) && ( TESTEAC_prev[0] !== TESTEAC_expected_prev[0] )
		&& ((TESTEAC_expected_prev[0] !== last_TESTEAC_exp[0]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port TESTEAC[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", TESTEAC_expected_prev);
		$display ("     Real value = %b", TESTEAC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_TESTEAC_exp[0] = TESTEAC_expected_prev[0];
	end
	if (
		( TESTEAC_expected_prev[1] !== 1'bx ) && ( TESTEAC_prev[1] !== TESTEAC_expected_prev[1] )
		&& ((TESTEAC_expected_prev[1] !== last_TESTEAC_exp[1]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port TESTEAC[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", TESTEAC_expected_prev);
		$display ("     Real value = %b", TESTEAC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_TESTEAC_exp[1] = TESTEAC_expected_prev[1];
	end
	if (
		( TESTEAC_expected_prev[2] !== 1'bx ) && ( TESTEAC_prev[2] !== TESTEAC_expected_prev[2] )
		&& ((TESTEAC_expected_prev[2] !== last_TESTEAC_exp[2]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port TESTEAC[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", TESTEAC_expected_prev);
		$display ("     Real value = %b", TESTEAC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_TESTEAC_exp[2] = TESTEAC_expected_prev[2];
	end
	if (
		( TESTEAC_expected_prev[3] !== 1'bx ) && ( TESTEAC_prev[3] !== TESTEAC_expected_prev[3] )
		&& ((TESTEAC_expected_prev[3] !== last_TESTEAC_exp[3]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port TESTEAC[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", TESTEAC_expected_prev);
		$display ("     Real value = %b", TESTEAC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_TESTEAC_exp[3] = TESTEAC_expected_prev[3];
	end
	if (
		( TESTEAC_expected_prev[4] !== 1'bx ) && ( TESTEAC_prev[4] !== TESTEAC_expected_prev[4] )
		&& ((TESTEAC_expected_prev[4] !== last_TESTEAC_exp[4]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port TESTEAC[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", TESTEAC_expected_prev);
		$display ("     Real value = %b", TESTEAC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_TESTEAC_exp[4] = TESTEAC_expected_prev[4];
	end
	if (
		( TESTEAC_expected_prev[5] !== 1'bx ) && ( TESTEAC_prev[5] !== TESTEAC_expected_prev[5] )
		&& ((TESTEAC_expected_prev[5] !== last_TESTEAC_exp[5]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port TESTEAC[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", TESTEAC_expected_prev);
		$display ("     Real value = %b", TESTEAC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_TESTEAC_exp[5] = TESTEAC_expected_prev[5];
	end
	if (
		( TESTEAC_expected_prev[6] !== 1'bx ) && ( TESTEAC_prev[6] !== TESTEAC_expected_prev[6] )
		&& ((TESTEAC_expected_prev[6] !== last_TESTEAC_exp[6]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port TESTEAC[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", TESTEAC_expected_prev);
		$display ("     Real value = %b", TESTEAC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_TESTEAC_exp[6] = TESTEAC_expected_prev[6];
	end
	if (
		( TESTEAC_expected_prev[7] !== 1'bx ) && ( TESTEAC_prev[7] !== TESTEAC_expected_prev[7] )
		&& ((TESTEAC_expected_prev[7] !== last_TESTEAC_exp[7]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port TESTEAC[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", TESTEAC_expected_prev);
		$display ("     Real value = %b", TESTEAC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_TESTEAC_exp[7] = TESTEAC_expected_prev[7];
	end
	if (
		( testeINC_expected_prev !== 1'bx ) && ( testeINC_prev !== testeINC_expected_prev )
		&& ((testeINC_expected_prev !== last_testeINC_exp) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testeINC :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testeINC_expected_prev);
		$display ("     Real value = %b", testeINC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_testeINC_exp = testeINC_expected_prev;
	end
	if (
		( testemem_expected_prev[0] !== 1'bx ) && ( testemem_prev[0] !== testemem_expected_prev[0] )
		&& ((testemem_expected_prev[0] !== last_testemem_exp[0]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testemem[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testemem_expected_prev);
		$display ("     Real value = %b", testemem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_testemem_exp[0] = testemem_expected_prev[0];
	end
	if (
		( testemem_expected_prev[1] !== 1'bx ) && ( testemem_prev[1] !== testemem_expected_prev[1] )
		&& ((testemem_expected_prev[1] !== last_testemem_exp[1]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testemem[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testemem_expected_prev);
		$display ("     Real value = %b", testemem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_testemem_exp[1] = testemem_expected_prev[1];
	end
	if (
		( testemem_expected_prev[2] !== 1'bx ) && ( testemem_prev[2] !== testemem_expected_prev[2] )
		&& ((testemem_expected_prev[2] !== last_testemem_exp[2]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testemem[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testemem_expected_prev);
		$display ("     Real value = %b", testemem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_testemem_exp[2] = testemem_expected_prev[2];
	end
	if (
		( testemem_expected_prev[3] !== 1'bx ) && ( testemem_prev[3] !== testemem_expected_prev[3] )
		&& ((testemem_expected_prev[3] !== last_testemem_exp[3]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testemem[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testemem_expected_prev);
		$display ("     Real value = %b", testemem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_testemem_exp[3] = testemem_expected_prev[3];
	end
	if (
		( testemem_expected_prev[4] !== 1'bx ) && ( testemem_prev[4] !== testemem_expected_prev[4] )
		&& ((testemem_expected_prev[4] !== last_testemem_exp[4]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testemem[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testemem_expected_prev);
		$display ("     Real value = %b", testemem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_testemem_exp[4] = testemem_expected_prev[4];
	end
	if (
		( testemem_expected_prev[5] !== 1'bx ) && ( testemem_prev[5] !== testemem_expected_prev[5] )
		&& ((testemem_expected_prev[5] !== last_testemem_exp[5]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testemem[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testemem_expected_prev);
		$display ("     Real value = %b", testemem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_testemem_exp[5] = testemem_expected_prev[5];
	end
	if (
		( testemem_expected_prev[6] !== 1'bx ) && ( testemem_prev[6] !== testemem_expected_prev[6] )
		&& ((testemem_expected_prev[6] !== last_testemem_exp[6]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testemem[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testemem_expected_prev);
		$display ("     Real value = %b", testemem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_testemem_exp[6] = testemem_expected_prev[6];
	end
	if (
		( testemem_expected_prev[7] !== 1'bx ) && ( testemem_prev[7] !== testemem_expected_prev[7] )
		&& ((testemem_expected_prev[7] !== last_testemem_exp[7]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testemem[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testemem_expected_prev);
		$display ("     Real value = %b", testemem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_testemem_exp[7] = testemem_expected_prev[7];
	end
	if (
		( testePC_expected_prev[0] !== 1'bx ) && ( testePC_prev[0] !== testePC_expected_prev[0] )
		&& ((testePC_expected_prev[0] !== last_testePC_exp[0]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testePC[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testePC_expected_prev);
		$display ("     Real value = %b", testePC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_testePC_exp[0] = testePC_expected_prev[0];
	end
	if (
		( testePC_expected_prev[1] !== 1'bx ) && ( testePC_prev[1] !== testePC_expected_prev[1] )
		&& ((testePC_expected_prev[1] !== last_testePC_exp[1]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testePC[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testePC_expected_prev);
		$display ("     Real value = %b", testePC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_testePC_exp[1] = testePC_expected_prev[1];
	end
	if (
		( testePC_expected_prev[2] !== 1'bx ) && ( testePC_prev[2] !== testePC_expected_prev[2] )
		&& ((testePC_expected_prev[2] !== last_testePC_exp[2]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testePC[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testePC_expected_prev);
		$display ("     Real value = %b", testePC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_testePC_exp[2] = testePC_expected_prev[2];
	end
	if (
		( testePC_expected_prev[3] !== 1'bx ) && ( testePC_prev[3] !== testePC_expected_prev[3] )
		&& ((testePC_expected_prev[3] !== last_testePC_exp[3]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testePC[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testePC_expected_prev);
		$display ("     Real value = %b", testePC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_testePC_exp[3] = testePC_expected_prev[3];
	end
	if (
		( testePC_expected_prev[4] !== 1'bx ) && ( testePC_prev[4] !== testePC_expected_prev[4] )
		&& ((testePC_expected_prev[4] !== last_testePC_exp[4]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testePC[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testePC_expected_prev);
		$display ("     Real value = %b", testePC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_testePC_exp[4] = testePC_expected_prev[4];
	end
	if (
		( testePC_expected_prev[5] !== 1'bx ) && ( testePC_prev[5] !== testePC_expected_prev[5] )
		&& ((testePC_expected_prev[5] !== last_testePC_exp[5]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testePC[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testePC_expected_prev);
		$display ("     Real value = %b", testePC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_testePC_exp[5] = testePC_expected_prev[5];
	end
	if (
		( testePC_expected_prev[6] !== 1'bx ) && ( testePC_prev[6] !== testePC_expected_prev[6] )
		&& ((testePC_expected_prev[6] !== last_testePC_exp[6]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testePC[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testePC_expected_prev);
		$display ("     Real value = %b", testePC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_testePC_exp[6] = testePC_expected_prev[6];
	end
	if (
		( testePC_expected_prev[7] !== 1'bx ) && ( testePC_prev[7] !== testePC_expected_prev[7] )
		&& ((testePC_expected_prev[7] !== last_testePC_exp[7]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testePC[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testePC_expected_prev);
		$display ("     Real value = %b", testePC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_testePC_exp[7] = testePC_expected_prev[7];
	end
	if (
		( testeRDM_expected_prev[0] !== 1'bx ) && ( testeRDM_prev[0] !== testeRDM_expected_prev[0] )
		&& ((testeRDM_expected_prev[0] !== last_testeRDM_exp[0]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testeRDM[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testeRDM_expected_prev);
		$display ("     Real value = %b", testeRDM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_testeRDM_exp[0] = testeRDM_expected_prev[0];
	end
	if (
		( testeRDM_expected_prev[1] !== 1'bx ) && ( testeRDM_prev[1] !== testeRDM_expected_prev[1] )
		&& ((testeRDM_expected_prev[1] !== last_testeRDM_exp[1]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testeRDM[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testeRDM_expected_prev);
		$display ("     Real value = %b", testeRDM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_testeRDM_exp[1] = testeRDM_expected_prev[1];
	end
	if (
		( testeRDM_expected_prev[2] !== 1'bx ) && ( testeRDM_prev[2] !== testeRDM_expected_prev[2] )
		&& ((testeRDM_expected_prev[2] !== last_testeRDM_exp[2]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testeRDM[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testeRDM_expected_prev);
		$display ("     Real value = %b", testeRDM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_testeRDM_exp[2] = testeRDM_expected_prev[2];
	end
	if (
		( testeRDM_expected_prev[3] !== 1'bx ) && ( testeRDM_prev[3] !== testeRDM_expected_prev[3] )
		&& ((testeRDM_expected_prev[3] !== last_testeRDM_exp[3]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testeRDM[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testeRDM_expected_prev);
		$display ("     Real value = %b", testeRDM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_testeRDM_exp[3] = testeRDM_expected_prev[3];
	end
	if (
		( testeRDM_expected_prev[4] !== 1'bx ) && ( testeRDM_prev[4] !== testeRDM_expected_prev[4] )
		&& ((testeRDM_expected_prev[4] !== last_testeRDM_exp[4]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testeRDM[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testeRDM_expected_prev);
		$display ("     Real value = %b", testeRDM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_testeRDM_exp[4] = testeRDM_expected_prev[4];
	end
	if (
		( testeRDM_expected_prev[5] !== 1'bx ) && ( testeRDM_prev[5] !== testeRDM_expected_prev[5] )
		&& ((testeRDM_expected_prev[5] !== last_testeRDM_exp[5]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testeRDM[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testeRDM_expected_prev);
		$display ("     Real value = %b", testeRDM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_testeRDM_exp[5] = testeRDM_expected_prev[5];
	end
	if (
		( testeRDM_expected_prev[6] !== 1'bx ) && ( testeRDM_prev[6] !== testeRDM_expected_prev[6] )
		&& ((testeRDM_expected_prev[6] !== last_testeRDM_exp[6]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testeRDM[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testeRDM_expected_prev);
		$display ("     Real value = %b", testeRDM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_testeRDM_exp[6] = testeRDM_expected_prev[6];
	end
	if (
		( testeRDM_expected_prev[7] !== 1'bx ) && ( testeRDM_prev[7] !== testeRDM_expected_prev[7] )
		&& ((testeRDM_expected_prev[7] !== last_testeRDM_exp[7]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testeRDM[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testeRDM_expected_prev);
		$display ("     Real value = %b", testeRDM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_testeRDM_exp[7] = testeRDM_expected_prev[7];
	end
	if (
		( testereg_expected_prev[0] !== 1'bx ) && ( testereg_prev[0] !== testereg_expected_prev[0] )
		&& ((testereg_expected_prev[0] !== last_testereg_exp[0]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testereg[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testereg_expected_prev);
		$display ("     Real value = %b", testereg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_testereg_exp[0] = testereg_expected_prev[0];
	end
	if (
		( testereg_expected_prev[1] !== 1'bx ) && ( testereg_prev[1] !== testereg_expected_prev[1] )
		&& ((testereg_expected_prev[1] !== last_testereg_exp[1]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testereg[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testereg_expected_prev);
		$display ("     Real value = %b", testereg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_testereg_exp[1] = testereg_expected_prev[1];
	end
	if (
		( testereg_expected_prev[2] !== 1'bx ) && ( testereg_prev[2] !== testereg_expected_prev[2] )
		&& ((testereg_expected_prev[2] !== last_testereg_exp[2]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testereg[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testereg_expected_prev);
		$display ("     Real value = %b", testereg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_testereg_exp[2] = testereg_expected_prev[2];
	end
	if (
		( testereg_expected_prev[3] !== 1'bx ) && ( testereg_prev[3] !== testereg_expected_prev[3] )
		&& ((testereg_expected_prev[3] !== last_testereg_exp[3]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testereg[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testereg_expected_prev);
		$display ("     Real value = %b", testereg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_testereg_exp[3] = testereg_expected_prev[3];
	end
	if (
		( testereg_expected_prev[4] !== 1'bx ) && ( testereg_prev[4] !== testereg_expected_prev[4] )
		&& ((testereg_expected_prev[4] !== last_testereg_exp[4]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testereg[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testereg_expected_prev);
		$display ("     Real value = %b", testereg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_testereg_exp[4] = testereg_expected_prev[4];
	end
	if (
		( testereg_expected_prev[5] !== 1'bx ) && ( testereg_prev[5] !== testereg_expected_prev[5] )
		&& ((testereg_expected_prev[5] !== last_testereg_exp[5]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testereg[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testereg_expected_prev);
		$display ("     Real value = %b", testereg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_testereg_exp[5] = testereg_expected_prev[5];
	end
	if (
		( testereg_expected_prev[6] !== 1'bx ) && ( testereg_prev[6] !== testereg_expected_prev[6] )
		&& ((testereg_expected_prev[6] !== last_testereg_exp[6]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testereg[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testereg_expected_prev);
		$display ("     Real value = %b", testereg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_testereg_exp[6] = testereg_expected_prev[6];
	end
	if (
		( testereg_expected_prev[7] !== 1'bx ) && ( testereg_prev[7] !== testereg_expected_prev[7] )
		&& ((testereg_expected_prev[7] !== last_testereg_exp[7]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testereg[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testereg_expected_prev);
		$display ("     Real value = %b", testereg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_testereg_exp[7] = testereg_expected_prev[7];
	end
	if (
		( testesel_expected_prev[0] !== 1'bx ) && ( testesel_prev[0] !== testesel_expected_prev[0] )
		&& ((testesel_expected_prev[0] !== last_testesel_exp[0]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testesel[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testesel_expected_prev);
		$display ("     Real value = %b", testesel_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_testesel_exp[0] = testesel_expected_prev[0];
	end
	if (
		( testesel_expected_prev[1] !== 1'bx ) && ( testesel_prev[1] !== testesel_expected_prev[1] )
		&& ((testesel_expected_prev[1] !== last_testesel_exp[1]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testesel[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testesel_expected_prev);
		$display ("     Real value = %b", testesel_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_testesel_exp[1] = testesel_expected_prev[1];
	end
	if (
		( testesel_expected_prev[2] !== 1'bx ) && ( testesel_prev[2] !== testesel_expected_prev[2] )
		&& ((testesel_expected_prev[2] !== last_testesel_exp[2]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testesel[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testesel_expected_prev);
		$display ("     Real value = %b", testesel_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_testesel_exp[2] = testesel_expected_prev[2];
	end
	if (
		( testesel_expected_prev[3] !== 1'bx ) && ( testesel_prev[3] !== testesel_expected_prev[3] )
		&& ((testesel_expected_prev[3] !== last_testesel_exp[3]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testesel[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testesel_expected_prev);
		$display ("     Real value = %b", testesel_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_testesel_exp[3] = testesel_expected_prev[3];
	end
	if (
		( testesel_expected_prev[4] !== 1'bx ) && ( testesel_prev[4] !== testesel_expected_prev[4] )
		&& ((testesel_expected_prev[4] !== last_testesel_exp[4]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testesel[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testesel_expected_prev);
		$display ("     Real value = %b", testesel_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_testesel_exp[4] = testesel_expected_prev[4];
	end
	if (
		( testesel_expected_prev[5] !== 1'bx ) && ( testesel_prev[5] !== testesel_expected_prev[5] )
		&& ((testesel_expected_prev[5] !== last_testesel_exp[5]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testesel[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testesel_expected_prev);
		$display ("     Real value = %b", testesel_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_testesel_exp[5] = testesel_expected_prev[5];
	end
	if (
		( testesel_expected_prev[6] !== 1'bx ) && ( testesel_prev[6] !== testesel_expected_prev[6] )
		&& ((testesel_expected_prev[6] !== last_testesel_exp[6]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testesel[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testesel_expected_prev);
		$display ("     Real value = %b", testesel_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_testesel_exp[6] = testesel_expected_prev[6];
	end
	if (
		( testesel_expected_prev[7] !== 1'bx ) && ( testesel_prev[7] !== testesel_expected_prev[7] )
		&& ((testesel_expected_prev[7] !== last_testesel_exp[7]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testesel[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testesel_expected_prev);
		$display ("     Real value = %b", testesel_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_testesel_exp[7] = testesel_expected_prev[7];
	end
	if (
		( ULASAIDA_expected_prev[0] !== 1'bx ) && ( ULASAIDA_prev[0] !== ULASAIDA_expected_prev[0] )
		&& ((ULASAIDA_expected_prev[0] !== last_ULASAIDA_exp[0]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULASAIDA[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULASAIDA_expected_prev);
		$display ("     Real value = %b", ULASAIDA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_ULASAIDA_exp[0] = ULASAIDA_expected_prev[0];
	end
	if (
		( ULASAIDA_expected_prev[1] !== 1'bx ) && ( ULASAIDA_prev[1] !== ULASAIDA_expected_prev[1] )
		&& ((ULASAIDA_expected_prev[1] !== last_ULASAIDA_exp[1]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULASAIDA[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULASAIDA_expected_prev);
		$display ("     Real value = %b", ULASAIDA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_ULASAIDA_exp[1] = ULASAIDA_expected_prev[1];
	end
	if (
		( ULASAIDA_expected_prev[2] !== 1'bx ) && ( ULASAIDA_prev[2] !== ULASAIDA_expected_prev[2] )
		&& ((ULASAIDA_expected_prev[2] !== last_ULASAIDA_exp[2]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULASAIDA[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULASAIDA_expected_prev);
		$display ("     Real value = %b", ULASAIDA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_ULASAIDA_exp[2] = ULASAIDA_expected_prev[2];
	end
	if (
		( ULASAIDA_expected_prev[3] !== 1'bx ) && ( ULASAIDA_prev[3] !== ULASAIDA_expected_prev[3] )
		&& ((ULASAIDA_expected_prev[3] !== last_ULASAIDA_exp[3]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULASAIDA[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULASAIDA_expected_prev);
		$display ("     Real value = %b", ULASAIDA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_ULASAIDA_exp[3] = ULASAIDA_expected_prev[3];
	end
	if (
		( ULASAIDA_expected_prev[4] !== 1'bx ) && ( ULASAIDA_prev[4] !== ULASAIDA_expected_prev[4] )
		&& ((ULASAIDA_expected_prev[4] !== last_ULASAIDA_exp[4]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULASAIDA[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULASAIDA_expected_prev);
		$display ("     Real value = %b", ULASAIDA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_ULASAIDA_exp[4] = ULASAIDA_expected_prev[4];
	end
	if (
		( ULASAIDA_expected_prev[5] !== 1'bx ) && ( ULASAIDA_prev[5] !== ULASAIDA_expected_prev[5] )
		&& ((ULASAIDA_expected_prev[5] !== last_ULASAIDA_exp[5]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULASAIDA[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULASAIDA_expected_prev);
		$display ("     Real value = %b", ULASAIDA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_ULASAIDA_exp[5] = ULASAIDA_expected_prev[5];
	end
	if (
		( ULASAIDA_expected_prev[6] !== 1'bx ) && ( ULASAIDA_prev[6] !== ULASAIDA_expected_prev[6] )
		&& ((ULASAIDA_expected_prev[6] !== last_ULASAIDA_exp[6]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULASAIDA[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULASAIDA_expected_prev);
		$display ("     Real value = %b", ULASAIDA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_ULASAIDA_exp[6] = ULASAIDA_expected_prev[6];
	end
	if (
		( ULASAIDA_expected_prev[7] !== 1'bx ) && ( ULASAIDA_prev[7] !== ULASAIDA_expected_prev[7] )
		&& ((ULASAIDA_expected_prev[7] !== last_ULASAIDA_exp[7]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULASAIDA[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULASAIDA_expected_prev);
		$display ("     Real value = %b", ULASAIDA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_ULASAIDA_exp[7] = ULASAIDA_expected_prev[7];
	end
	if (
		( Xba_expected_prev[0] !== 1'bx ) && ( Xba_prev[0] !== Xba_expected_prev[0] )
		&& ((Xba_expected_prev[0] !== last_Xba_exp[0]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Xba[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Xba_expected_prev);
		$display ("     Real value = %b", Xba_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_Xba_exp[0] = Xba_expected_prev[0];
	end
	if (
		( Xba_expected_prev[1] !== 1'bx ) && ( Xba_prev[1] !== Xba_expected_prev[1] )
		&& ((Xba_expected_prev[1] !== last_Xba_exp[1]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Xba[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Xba_expected_prev);
		$display ("     Real value = %b", Xba_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_Xba_exp[1] = Xba_expected_prev[1];
	end
	if (
		( Xba_expected_prev[2] !== 1'bx ) && ( Xba_prev[2] !== Xba_expected_prev[2] )
		&& ((Xba_expected_prev[2] !== last_Xba_exp[2]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Xba[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Xba_expected_prev);
		$display ("     Real value = %b", Xba_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_Xba_exp[2] = Xba_expected_prev[2];
	end
	if (
		( Xba_expected_prev[3] !== 1'bx ) && ( Xba_prev[3] !== Xba_expected_prev[3] )
		&& ((Xba_expected_prev[3] !== last_Xba_exp[3]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Xba[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Xba_expected_prev);
		$display ("     Real value = %b", Xba_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_Xba_exp[3] = Xba_expected_prev[3];
	end
	if (
		( Xba_expected_prev[4] !== 1'bx ) && ( Xba_prev[4] !== Xba_expected_prev[4] )
		&& ((Xba_expected_prev[4] !== last_Xba_exp[4]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Xba[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Xba_expected_prev);
		$display ("     Real value = %b", Xba_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_Xba_exp[4] = Xba_expected_prev[4];
	end
	if (
		( Xba_expected_prev[5] !== 1'bx ) && ( Xba_prev[5] !== Xba_expected_prev[5] )
		&& ((Xba_expected_prev[5] !== last_Xba_exp[5]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Xba[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Xba_expected_prev);
		$display ("     Real value = %b", Xba_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_Xba_exp[5] = Xba_expected_prev[5];
	end
	if (
		( Xba_expected_prev[6] !== 1'bx ) && ( Xba_prev[6] !== Xba_expected_prev[6] )
		&& ((Xba_expected_prev[6] !== last_Xba_exp[6]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Xba[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Xba_expected_prev);
		$display ("     Real value = %b", Xba_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_Xba_exp[6] = Xba_expected_prev[6];
	end
	if (
		( Xba_expected_prev[7] !== 1'bx ) && ( Xba_prev[7] !== Xba_expected_prev[7] )
		&& ((Xba_expected_prev[7] !== last_Xba_exp[7]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Xba[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Xba_expected_prev);
		$display ("     Real value = %b", Xba_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_Xba_exp[7] = Xba_expected_prev[7];
	end
	if (
		( yAAA_expected_prev !== 1'bx ) && ( yAAA_prev !== yAAA_expected_prev )
		&& ((yAAA_expected_prev !== last_yAAA_exp) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port yAAA :: @time = %t",  $realtime);
		$display ("     Expected value = %b", yAAA_expected_prev);
		$display ("     Real value = %b", yAAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_yAAA_exp = yAAA_expected_prev;
	end
	if (
		( Yba_expected_prev[0] !== 1'bx ) && ( Yba_prev[0] !== Yba_expected_prev[0] )
		&& ((Yba_expected_prev[0] !== last_Yba_exp[0]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Yba[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Yba_expected_prev);
		$display ("     Real value = %b", Yba_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_Yba_exp[0] = Yba_expected_prev[0];
	end
	if (
		( Yba_expected_prev[1] !== 1'bx ) && ( Yba_prev[1] !== Yba_expected_prev[1] )
		&& ((Yba_expected_prev[1] !== last_Yba_exp[1]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Yba[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Yba_expected_prev);
		$display ("     Real value = %b", Yba_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_Yba_exp[1] = Yba_expected_prev[1];
	end
	if (
		( Yba_expected_prev[2] !== 1'bx ) && ( Yba_prev[2] !== Yba_expected_prev[2] )
		&& ((Yba_expected_prev[2] !== last_Yba_exp[2]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Yba[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Yba_expected_prev);
		$display ("     Real value = %b", Yba_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_Yba_exp[2] = Yba_expected_prev[2];
	end
	if (
		( Yba_expected_prev[3] !== 1'bx ) && ( Yba_prev[3] !== Yba_expected_prev[3] )
		&& ((Yba_expected_prev[3] !== last_Yba_exp[3]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Yba[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Yba_expected_prev);
		$display ("     Real value = %b", Yba_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_Yba_exp[3] = Yba_expected_prev[3];
	end
	if (
		( Yba_expected_prev[4] !== 1'bx ) && ( Yba_prev[4] !== Yba_expected_prev[4] )
		&& ((Yba_expected_prev[4] !== last_Yba_exp[4]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Yba[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Yba_expected_prev);
		$display ("     Real value = %b", Yba_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_Yba_exp[4] = Yba_expected_prev[4];
	end
	if (
		( Yba_expected_prev[5] !== 1'bx ) && ( Yba_prev[5] !== Yba_expected_prev[5] )
		&& ((Yba_expected_prev[5] !== last_Yba_exp[5]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Yba[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Yba_expected_prev);
		$display ("     Real value = %b", Yba_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_Yba_exp[5] = Yba_expected_prev[5];
	end
	if (
		( Yba_expected_prev[6] !== 1'bx ) && ( Yba_prev[6] !== Yba_expected_prev[6] )
		&& ((Yba_expected_prev[6] !== last_Yba_exp[6]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Yba[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Yba_expected_prev);
		$display ("     Real value = %b", Yba_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_Yba_exp[6] = Yba_expected_prev[6];
	end
	if (
		( Yba_expected_prev[7] !== 1'bx ) && ( Yba_prev[7] !== Yba_expected_prev[7] )
		&& ((Yba_expected_prev[7] !== last_Yba_exp[7]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Yba[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Yba_expected_prev);
		$display ("     Real value = %b", Yba_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_Yba_exp[7] = Yba_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module NeanderMain_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
reg mem;
// wires                                               
wire addAAA;
wire andAAA;
wire [6:0] HEX2;
wire [6:0] HEX3;
wire notAAA;
wire opA;
wire opB;
wire opC;
wire orAAA;
wire [7:0] outroRDM;
wire [7:0] RIOUTTESTE;
wire [7:0] TESTEAC;
wire testeINC;
wire [7:0] testemem;
wire [7:0] testePC;
wire [7:0] testeRDM;
wire [7:0] testereg;
wire [7:0] testesel;
wire [7:0] ULASAIDA;
wire [7:0] Xba;
wire yAAA;
wire [7:0] Yba;

wire sampler;                             

// assign statements (if any)                          
NeanderMain i1 (
// port map - connection between master ports and signals/registers   
	.addAAA(addAAA),
	.andAAA(andAAA),
	.CLK(CLK),
	.HEX2(HEX2),
	.HEX3(HEX3),
	.mem(mem),
	.notAAA(notAAA),
	.opA(opA),
	.opB(opB),
	.opC(opC),
	.orAAA(orAAA),
	.outroRDM(outroRDM),
	.RIOUTTESTE(RIOUTTESTE),
	.TESTEAC(TESTEAC),
	.testeINC(testeINC),
	.testemem(testemem),
	.testePC(testePC),
	.testeRDM(testeRDM),
	.testereg(testereg),
	.testesel(testesel),
	.ULASAIDA(ULASAIDA),
	.Xba(Xba),
	.yAAA(yAAA),
	.Yba(Yba)
);

// CLK
always
begin
	CLK = 1'b0;
	CLK = #10000 1'b1;
	#10000;
end 

// mem
initial
begin
	mem = 1'b0;
end 

NeanderMain_vlg_sample_tst tb_sample (
	.CLK(CLK),
	.mem(mem),
	.sampler_tx(sampler)
);

NeanderMain_vlg_check_tst tb_out(
	.addAAA(addAAA),
	.andAAA(andAAA),
	.HEX2(HEX2),
	.HEX3(HEX3),
	.notAAA(notAAA),
	.opA(opA),
	.opB(opB),
	.opC(opC),
	.orAAA(orAAA),
	.outroRDM(outroRDM),
	.RIOUTTESTE(RIOUTTESTE),
	.TESTEAC(TESTEAC),
	.testeINC(testeINC),
	.testemem(testemem),
	.testePC(testePC),
	.testeRDM(testeRDM),
	.testereg(testereg),
	.testesel(testesel),
	.ULASAIDA(ULASAIDA),
	.Xba(Xba),
	.yAAA(yAAA),
	.Yba(Yba),
	.sampler_rx(sampler)
);
endmodule

